// GLOBALS
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};


// Typedefs

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

// Pixel Shader

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	// 이 텍스쳐 좌표 위치에서 샘플러를 사용하여 텍스쳐에서 픽셀 색상을 샘플링 한다.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// 계산을 위해 빛 방향을 반전시킨다.
	lightDir = -lightDirection;

	// 이 픽셀의 빛의 양을 계산한다.
	lightIntensity = saturate(dot(input.normal, lightDir));

	// 빛의 강도와 결합 된 확산 색을 기준으로 최종 색상의 최종 색상을 결정한다.
	color = saturate(diffuseColor * lightIntensity);

	// 텍스쳐 픽셀과 최종 확산 색을 곱하여 최종 픽셀 색상 결과를 얻습니다.
	color = color * textureColor;

	return color;
}